AWSTemplateFormatVersion: '2010-09-09'
Description: "Stack de aplicacion: EC2 backend Node.js + ALB + AutoScaling"

Parameters:
  LatestAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

  KeyName:
    Type: String
    Description: Nombre del par de llaves para EC2

  NetworkStackName:
    Type: String
    Default: WebAppNetwork
    Description: Nombre del stack de red del cual importar subredes y VPC

  DBPassword:
    Type: String
    NoEcho: true
    Description: Contrase√±a de la base de datos MySQL RDS

  RDSHost:
    Type: String
    Description: Endpoint del RDS MySQL

Resources:

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access public to Load Balancer
      VpcId:
        Fn::ImportValue: !Sub "${NetworkStackName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access from Load Balancer
      VpcId:
        Fn::ImportValue: !Sub "${NetworkStackName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: webapp-launch-template
      LaunchTemplateData:
        ImageId: !Ref LatestAmiId
        InstanceType: t2.micro
        KeyName: !Ref KeyName
        SecurityGroupIds:
          - !Ref InstanceSecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            curl -sL https://rpm.nodesource.com/setup_16.x | bash -
            yum install -y nodejs git mysql
            git clone https://github.com/felipevelasco7/PonchonetaStore.git /home/ec2-user/app
            cd /home/ec2-user/app
            sleep 60
            mysql -h ${RDSHost} -u poncho -p${DBPassword} ponchonetaDB < db/ponchonetaDB.sql

            mkdir -p /home/ec2-user/app/back
            cat > /home/ec2-user/app/back/.env <<EOF
            DB_HOST=${RDSHost}
            DB_USER=poncho
            DB_PASSWORD=${DBPassword}
            DB_NAME=ponchonetaDB
            WOMPI_PUBLIC_KEY='pub_test_7OBPgywA4RKSR7r3HiLFdZk6D3iTcV8I'
            WOMPI_PRIVATE_KEY='prv_test_TEzadcH5GpXBbMfyToyus0KyLlHNmdw4'
            WOMPI_SECRET_KEY='test_integrity_yrxAsjSsxDCGk2sfDqL'
            EOF
            
            cd /home/ec2-user/app/back
            npm install
            nohup node server.js > /home/ec2-user/server.log 2>&1 &
  

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: webapp-alb
      Subnets:
        - Fn::ImportValue: !Sub "${NetworkStackName}-PublicSubnetA"
        - Fn::ImportValue: !Sub "${NetworkStackName}-PublicSubnetB"
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Scheme: internet-facing
      Type: application

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId:
        Fn::ImportValue: !Sub "${NetworkStackName}-VPCID"
      Port: 3000
      Protocol: HTTP
      TargetType: instance
      HealthCheckPath: /

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub "${NetworkStackName}-PublicSubnetA"
        - Fn::ImportValue: !Sub "${NetworkStackName}-PublicSubnetB"
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: 2
      MaxSize: 4
      TargetGroupARNs:
        - !Ref ALBTargetGroup
      Tags:
        - Key: Name
          Value: WebAppNodeInstance
          PropagateAtLaunch: true

Outputs:
  ALBURL:
    Description: URL publica de la aplicacion web
    Value: !Sub "http://${ALB.DNSName}"
