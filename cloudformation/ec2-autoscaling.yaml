AWSTemplateFormatVersion: '2010-09-09'
Description: Auto Scaling Group para instancias EC2 de Ponchoneta (AMI hardcodeada, SIN Instance Profile)

Parameters:
  VPC:
    Type: AWS::EC2::VPC::Id
  Subnet1:
    Type: AWS::EC2::Subnet::Id
  Subnet2:
    Type: AWS::EC2::Subnet::Id
  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
  TargetGroup: # ARN del Target Group del ALB
    Type: String
  DBEndpoint:
    Type: String
    Description: Endpoint de la base de datos RDS
  DBName:
    Type: String
    Description: Nombre de la base de datos RDS
  DBUser:
    Type: String
    Description: Usuario de la base de datos RDS
  DBPasswordValue:
    Type: String
    Description: Contraseña de la base de datos RDS (se pasa desde el script)
    NoEcho: true
  # ExistingInstanceProfileName: # Comentado ya que no lo usaremos
  #   Type: String
  #   Description: El nombre del Instance Profile existente que las instancias EC2 deben usar.
  #   Default: EMR_EC2_DefaultRole

Resources:
  PonchonetaLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: PonchonetaLaunchTemplate
      LaunchTemplateData:
        ImageId: ami-09f4814ae750baed6 # AMI ID actualizada
        InstanceType: t3.micro
        SecurityGroupIds:
          - !Ref AppSecurityGroup
        # IamInstanceProfile: # <-- SECCIÓN COMENTADA/ELIMINADA
        #   Name: !Ref ExistingInstanceProfileName 
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
            echo "--- Iniciando UserData Script ---"
            yum update -y
            echo "--- Instalando Node.js y Git ---"
            curl -sL https://rpm.nodesource.com/setup_16.x | bash - 
            yum install -y nodejs git
            echo "--- Clonando repositorio ---"
            cd /home/ec2-user
            git clone https://github.com/felipevelasco7/PonchonetaEcommerce.git
            chown -R ec2-user:ec2-user PonchonetaEcommerce
            cd PonchonetaEcommerce/backend
            echo "--- Configurando variables de entorno para la aplicacion ---"
            echo "DB_HOST=${DBEndpoint}" > .env
            echo "DB_NAME=${DBName}" >> .env
            echo "DB_USER=${DBUser}" >> .env
            echo "DB_PASSWORD=${DBPasswordValue}" >> .env
            echo "PORT=3000" >> .env
            chown ec2-user:ec2-user .env
            echo "--- Instalando dependencias de la aplicacion y PM2 ---"
            npm install
            npm install -g pm2
            echo "--- Iniciando aplicacion con PM2 ---"
            sudo -u ec2-user pm2 start app.js --name ponchoneta-backend -o app.log -e app.err.log --log-date-format "YYYY-MM-DD HH:mm Z"
            sudo -u ec2-user pm2 startup
            sudo -u ec2-user pm2 save
            echo "--- UserData Script Finalizado ---"
      TagSpecifications: 
        - ResourceType: launch-template
          Tags:
            - Key: Name
              Value: PonchonetaLaunchTemplate

  PonchonetaAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref Subnet1
        - !Ref Subnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref PonchonetaLaunchTemplate
        Version: !GetAtt PonchonetaLaunchTemplate.LatestVersionNumber
      MinSize: "1"
      MaxSize: "2"
      DesiredCapacity: "1"
      TargetGroupARNs:
        - !Ref TargetGroup
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags: 
        - Key: Name
          Value: PonchonetaASG
          PropagateAtLaunch: true

Outputs:
  AutoScalingGroupName:
    Description: Nombre del Auto Scaling Group
    Value: !Ref PonchonetaAutoScalingGroup
    Export:
      Name: PonchonetaAutoScalingGroup